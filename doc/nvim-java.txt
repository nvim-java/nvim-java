*nvim-java.txt*          For Neovim >= 0.9.4         Last change: 2024 July 05

==============================================================================
Table of Contents                                *nvim-java-table-of-contents*

1. nvim-java                                             |nvim-java-nvim-java|
  - Demo                                                      |nvim-java-demo|
  - Features                                              |nvim-java-features|
  - Why                                                        |nvim-java-why|
  - How to Install                                  |nvim-java-how-to-install|
  - Commands                                              |nvim-java-commands|
  - APIs                                                      |nvim-java-apis|
  - How to Use JDK X.X Version?        |nvim-java-how-to-use-jdk-x.x-version?|
  - Configuration                                    |nvim-java-configuration|
  - Architecture                                      |nvim-java-architecture|
  - Projects Acknowledgement              |nvim-java-projects-acknowledgement|
2. Links                                                     |nvim-java-links|

==============================================================================
1. nvim-java                                             *nvim-java-nvim-java*



Just install and start writing `public static void main(String[] args)`.


  [!WARNING] You cannot use `nvim-java` alongside `nvim-jdtls`. So remove
  `nvim-jdtls` before installing this

DEMO                                                          *nvim-java-demo*


<https://github.com/nvim-java/nvim-java/assets/18459807/047c8c46-9a0a-4869-b342-d5c2e15647bc>


FEATURES                                                  *nvim-java-features*

- Spring boot tools
- Diagnostics & Auto Completion
- Automatic DAP <https://github.com/mfussenegger/nvim-dap>
    debug configuration
- Running tests
- Run & Debug profiles


WHY                                                            *nvim-java-why*

- Everything necessary will be installed automatically
- Uses nvim-lspconfig <https://github.com/neovim/nvim-lspconfig> to setup `jdtls`
- Realtime server settings updates is possible using neoconf <https://github.com/folke/neoconf.nvim>
- Auto loads necessary `jdtls` plugins
    - Supported plugins are,
        - `spring-boot-tools`
        - `lombok`
        - `java-test`
        - `java-debug-adapter`


HOW TO INSTALL                                      *nvim-java-how-to-install*

:small_orange_diamond:details ~


Q & A ~

If you face any issues, check our Q & A
<https://github.com/nvim-java/nvim-java/wiki/Q-&-A> wiki to see if that helps


DISTRIBUTIONS & TEMPLATES ~

- Lazyvim <https://github.com/nvim-java/nvim-java/wiki/Lazyvim>
- Kickstart <https://github.com/nvim-java/nvim-java/wiki/Kickstart>


CUSTOM ~

- Install the plugin

Using lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    return {'nvim-java/nvim-java'}
<

- Setup nvim-java before `lspconfig`

>lua
    require('java').setup()
<

- Setup jdtls like you would usually do

>lua
    require('lspconfig').jdtls.setup({})
<

Yep! That’s all :)


COMMANDS                                                  *nvim-java-commands*

:small_orange_diamond:details ~


RUNNER ~

- `JavaRunnerRunMain` - Runs the application or selected main class (if there
    are multiple main classes)

>vim
    :JavaRunnerRunMain
    :JavaRunnerRunMain <arguments> <to> <pass>
<

- `JavaRunnerStopMain` - Stops the running application
- `JavaRunnerToggleLogs` - Toggle between show & hide runner log window


DAP ~

- `JavaDapConfig` - DAP is autoconfigured on start up, but in case you want to
    force configure it again, you can use this API


TEST ~

- `JavaTestRunCurrentClass` - Run the test class in the active buffer
- `JavaTestDebugCurrentClass` - Debug the test class in the active buffer
- `JavaTestRunCurrentMethod` - Run the test method on the cursor
- `JavaTestDebugCurrentMethod` - Debug the test method on the cursor
- `JavaTestViewLastReport` - Open the last test report in a popup window


PROFILES ~

- `JavaProfile` - Opens the profiles UI


REFACTOR ~

- `JavaRefactorExtractVariable` - Create a variable from returned value at cursor


APIS                                                          *nvim-java-apis*

:small_orange_diamond:details ~


RUNNER ~

- `built_in.run_app` - Runs the application or selected main class (if there
    are multiple main classes)

>lua
    require('java').runner.built_in.run_app({})
    require('java').runner.built_in.run_app({'arguments', 'to', 'pass', 'to', 'main'})
<

- `built_in.stop_app` - Stops the running application

>lua
    require('java').runner.built_in.stop_app()
<

- `built_in.toggle_logs` - Toggle between show & hide runner log window

>lua
    require('java').runner.built_in.toggle_logs()
<


DAP ~

- `config_dap` - DAP is autoconfigured on start up, but in case you want to force
    configure it again, you can use this API

>lua
    require('java').dap.config_dap()
<


TEST ~

- `run_current_class` - Run the test class in the active buffer

>lua
    require('java').test.run_current_class()
<

- `debug_current_class` - Debug the test class in the active buffer

>lua
    require('java').test.debug_current_class()
<

- `run_current_method` - Run the test method on the cursor

>lua
    require('java').test.run_current_method()
<

- `debug_current_method` - Debug the test method on the cursor

>lua
    require('java').test.debug_current_method()
<

- `view_report` - Open the last test report in a popup window

>lua
    require('java').test.view_last_report()
<


PROFILES ~

>lua
    require('java').profile.ui()
<


REFACTOR ~

- `extract_variable` - Create a variable from returned value at cursor

>lua
    require('java').refactor.extract_variable()
<


HOW TO USE JDK X.X VERSION?            *nvim-java-how-to-use-jdk-x.x-version?*

:small_orange_diamond:details ~


METHOD 1 ~

Neoconf <https://github.com/folke/neoconf.nvim> can be used to manage LSP
setting including jdtls. Neoconf allows global configuration as well as project
vice configurations. Here is how you can set Jdtls setting on `neoconf.json`

>json
    {
      "lspconfig": {
        "jdtls": {
          "java.configuration.runtimes": [
            {
              "name": "JavaSE-21",
              "path": "/opt/jdk-21",
              "default": true
            }
          ]
        }
      }
    }
<


METHOD 2 ~

Pass the settings to Jdtls setup.

>lua
    require('lspconfig').jdtls.setup({
      settings = {
        java = {
          configuration = {
            runtimes = {
              {
                name = "JavaSE-21",
                path = "/opt/jdk-21",
                default = true,
              }
            }
          }
        }
      }
    })
<


CONFIGURATION                                        *nvim-java-configuration*

:small_orange_diamond:details ~

For most users changing the default configuration is not necessary. But if you
want, following options are available

>lua
    {
      --  list of file that exists in root of the project
      root_markers = {
        'settings.gradle',
        'settings.gradle.kts',
        'pom.xml',
        'build.gradle',
        'mvnw',
        'gradlew',
        'build.gradle',
        'build.gradle.kts',
        '.git',
      },
    
      -- load java test plugins
      java_test = {
        enable = true,
      },
    
      -- load java debugger plugins
      java_debug_adapter = {
        enable = true,
      },
    
      spring_boot_tools = {
        enable = true,
      },
    
      jdk = {
        -- install jdk using mason.nvim
        auto_install = true,
      },
    
      notifications = {
        -- enable 'Configuring DAP' & 'DAP configured' messages on start up
        dap = true,
      },
    
      -- We do multiple verifications to make sure things are in place to run this
      -- plugin
      verification = {
        -- nvim-java checks for the order of execution of following
        -- * require('java').setup()
        -- * require('lspconfig').jdtls.setup()
        -- IF they are not executed in the correct order, you will see a error
        -- notification.
        -- Set following to false to disable the notification if you know what you
        -- are doing
        invalid_order = true,
    
        -- nvim-java checks if the require('java').setup() is called multiple
        -- times.
        -- IF there are multiple setup calls are executed, an error will be shown
        -- Set following property value to false to disable the notification if
        -- you know what you are doing
        duplicate_setup_calls = true,
    
        -- nvim-java checks if nvim-java/mason-registry is added correctly to
        -- mason.nvim plugin.
        -- IF it's not registered correctly, an error will be thrown and nvim-java
        -- will stop setup
        invalid_mason_registry = true,
      },
    }
<


ARCHITECTURE                                          *nvim-java-architecture*

:small_orange_diamond:details ~

Following is the high level idea. Jdtls is the language server nvim-java
communicates with. However, we don’t have all the features we need just in
Jdtls. So, we are loading java-test & java-debug-adapter extensions when we
launch Jdtls. Once the language server is started, we communicate with the
language server to do stuff.

For instance, to run the current test,

- Request Jdtls for test classes
- Request Jdtls for class paths, module paths, java executable
- Request Jdtls to start a debug session and send the port of the session back
- Prepare TCP connections to listen to the test results
- Start nvim-dap and let user interactions to be handled by nvim-dap
- Parse the test results as they come in
- Once the execution is done, open a window show the test results

>text
      ┌────────────┐                         ┌────────────┐
      │            │                         │            │
      │   Neovim   │                         │   VSCode   │
      │            │                         │            │
      └─────▲──────┘                         └──────▲─────┘
            │                                       │
            │                                       │
            │                                       │
            │                                       │
    ┌───────▼───────┐                ┌──────────────▼──────────────┐
    │               │                │                             │
    │   nvim-java   │                │   Extension Pack for Java   │
    │               │                │                             │
    └───────▲───────┘                └──────────────▲──────────────┘
            │                                       │
            │                                       │
            │                                       │
            │                                       │
            │                                       │
            │              ┌───────────┐            │
            │              │           │            │
            └──────────────►   JDTLS   ◄────────────┘
                           │           │
                           └───▲───▲───┘
                               │   │
                               │   │
                               │   │
                               │   │
                               │   │
      ┌───────────────┐        │   │         ┌────────────────────────┐
      │               │        │   │         │                        │
      │   java-test   ◄────────┘   └─────────►   java-debug-adapter   │
      │               │                      │                        │
      └───────────────┘                      └────────────────────────┘
<


PROJECTS ACKNOWLEDGEMENT                  *nvim-java-projects-acknowledgement*

nvim-jdtls <https://github.com/mfussenegger/nvim-jdtls> is a plugin that
follows "Keep it simple, stupid!" approach. If you love customizing things by
yourself, then give nvim-jdtls a try. I may or may not have copied some code
Beautyof Open source!

==============================================================================
2. Links                                                     *nvim-java-links*

1. *Java*: https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white
2. *Gradle*: https://img.shields.io/badge/Gradle-02303A.svg?style=for-the-badge&logo=Gradle&logoColor=white
3. *Apache Maven*: https://img.shields.io/badge/Apache%20Maven-C71A36?style=for-the-badge&logo=Apache%20Maven&logoColor=white
4. *Neovim*: https://img.shields.io/badge/NeoVim-%2357A143.svg?&style=for-the-badge&logo=neovim&logoColor=white
5. *Lua*: https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&logo=lua&logoColor=white

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
